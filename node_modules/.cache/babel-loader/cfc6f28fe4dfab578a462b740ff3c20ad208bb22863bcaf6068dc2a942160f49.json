{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prem Kumar\\\\rainn\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_ROWS = 20;\nconst GRID_COLUMNS = 15;\nconst COLORS = [\"magenta\", \"cyan\", \"lime\", \"yellow\", \"orange\", \"blue\"]; // Color options\n\nconst App = () => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    // Initialize the grid with null (no color)\n    const initialGrid = Array(GRID_ROWS).fill(0).map(() => Array(GRID_COLUMNS).fill(null));\n    setGrid(initialGrid);\n\n    // Function to handle updates for a specific column range\n    const updateColumns = (startCol, endCol, delay) => {\n      setTimeout(() => {\n        const interval = setInterval(() => {\n          setGrid(prevGrid => {\n            const newGrid = Array(GRID_ROWS).fill(0).map(() => Array(GRID_COLUMNS).fill(null));\n\n            // Iterate through rows and columns\n            for (let row = GRID_ROWS - 1; row >= 0; row--) {\n              for (let col = 0; col < GRID_COLUMNS; col++) {\n                // Process only columns in the specified range\n                if (col >= startCol && col < endCol) {\n                  if (prevGrid[row][col]) {\n                    // Move color downward\n                    if (row < GRID_ROWS - 1) {\n                      newGrid[row + 1][col] = prevGrid[row][col];\n                    }\n                  } else if (Math.random() < 0.03) {\n                    // Randomly generate a new color\n                    newGrid[row][col] = COLORS[Math.floor(Math.random() * COLORS.length)];\n                  }\n                } else {\n                  // Retain the previous state for columns outside the range\n                  newGrid[row][col] = prevGrid[row][col];\n                }\n              }\n            }\n            return newGrid;\n          });\n        }, 150);\n        return () => clearInterval(interval); // Clear interval on unmount\n      }, delay);\n    };\n\n    // Update different portions of the grid with different delays\n    updateColumns(0, 2, 0); // First 2 columns immediately\n    updateColumns(6, 8, 2000); // Middle 2 columns after 2 seconds\n    updateColumns(13, 15, 4000); // Last 2 columns after 4 seconds\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell\",\n          style: {\n            backgroundColor: cell || \"black\" // Use cell's color or black\n          }\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"w1YSakViRD9z3AUkL5Qso5coyFg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GRID_ROWS","GRID_COLUMNS","COLORS","App","_s","grid","setGrid","initialGrid","Array","fill","map","updateColumns","startCol","endCol","delay","setTimeout","interval","setInterval","prevGrid","newGrid","row","col","Math","random","floor","length","clearInterval","className","children","rowIndex","cell","colIndex","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Prem Kumar/rainn/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst GRID_ROWS = 20;\r\nconst GRID_COLUMNS = 15;\r\nconst COLORS = [\"magenta\", \"cyan\", \"lime\", \"yellow\", \"orange\", \"blue\"]; // Color options\r\n\r\nconst App = () => {\r\n  const [grid, setGrid] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Initialize the grid with null (no color)\r\n    const initialGrid = Array(GRID_ROWS)\r\n      .fill(0)\r\n      .map(() => Array(GRID_COLUMNS).fill(null));\r\n    setGrid(initialGrid);\r\n\r\n    // Function to handle updates for a specific column range\r\n    const updateColumns = (startCol, endCol, delay) => {\r\n      setTimeout(() => {\r\n        const interval = setInterval(() => {\r\n          setGrid((prevGrid) => {\r\n            const newGrid = Array(GRID_ROWS)\r\n              .fill(0)\r\n              .map(() => Array(GRID_COLUMNS).fill(null));\r\n\r\n            // Iterate through rows and columns\r\n            for (let row = GRID_ROWS - 1; row >= 0; row--) {\r\n              for (let col = 0; col < GRID_COLUMNS; col++) {\r\n                // Process only columns in the specified range\r\n                if (col >= startCol && col < endCol) {\r\n                  if (prevGrid[row][col]) {\r\n                    // Move color downward\r\n                    if (row < GRID_ROWS - 1) {\r\n                      newGrid[row + 1][col] = prevGrid[row][col];\r\n                    }\r\n                  } else if (Math.random() < 0.03) {\r\n                    // Randomly generate a new color\r\n                    newGrid[row][col] = COLORS[Math.floor(Math.random() * COLORS.length)];\r\n                  }\r\n                } else {\r\n                  // Retain the previous state for columns outside the range\r\n                  newGrid[row][col] = prevGrid[row][col];\r\n                }\r\n              }\r\n            }\r\n\r\n            return newGrid;\r\n          });\r\n        }, 150);\r\n\r\n        return () => clearInterval(interval); // Clear interval on unmount\r\n      }, delay);\r\n    };\r\n\r\n    // Update different portions of the grid with different delays\r\n    updateColumns(0, 2, 0); // First 2 columns immediately\r\n    updateColumns(6, 8, 2000); // Middle 2 columns after 2 seconds\r\n    updateColumns(13, 15, 4000); // Last 2 columns after 4 seconds\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"grid\">\r\n        {grid.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"grid-row\">\r\n            {row.map((cell, colIndex) => (\r\n              <div\r\n                key={colIndex}\r\n                className=\"grid-cell\"\r\n                style={{\r\n                  backgroundColor: cell || \"black\", // Use cell's color or black\r\n                }}\r\n              ></div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,SAAS,GAAG,EAAE;AACpB,MAAMC,YAAY,GAAG,EAAE;AACvB,MAAMC,MAAM,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;;AAExE,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,WAAW,GAAGC,KAAK,CAACR,SAAS,CAAC,CACjCS,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMF,KAAK,CAACP,YAAY,CAAC,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5CH,OAAO,CAACC,WAAW,CAAC;;IAEpB;IACA,MAAMI,aAAa,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,KAAK;MACjDC,UAAU,CAAC,MAAM;QACf,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;UACjCX,OAAO,CAAEY,QAAQ,IAAK;YACpB,MAAMC,OAAO,GAAGX,KAAK,CAACR,SAAS,CAAC,CAC7BS,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMF,KAAK,CAACP,YAAY,CAAC,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC;;YAE5C;YACA,KAAK,IAAIW,GAAG,GAAGpB,SAAS,GAAG,CAAC,EAAEoB,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;cAC7C,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGpB,YAAY,EAAEoB,GAAG,EAAE,EAAE;gBAC3C;gBACA,IAAIA,GAAG,IAAIT,QAAQ,IAAIS,GAAG,GAAGR,MAAM,EAAE;kBACnC,IAAIK,QAAQ,CAACE,GAAG,CAAC,CAACC,GAAG,CAAC,EAAE;oBACtB;oBACA,IAAID,GAAG,GAAGpB,SAAS,GAAG,CAAC,EAAE;sBACvBmB,OAAO,CAACC,GAAG,GAAG,CAAC,CAAC,CAACC,GAAG,CAAC,GAAGH,QAAQ,CAACE,GAAG,CAAC,CAACC,GAAG,CAAC;oBAC5C;kBACF,CAAC,MAAM,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,EAAE;oBAC/B;oBACAJ,OAAO,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGnB,MAAM,CAACoB,IAAI,CAACE,KAAK,CAACF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGrB,MAAM,CAACuB,MAAM,CAAC,CAAC;kBACvE;gBACF,CAAC,MAAM;kBACL;kBACAN,OAAO,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGH,QAAQ,CAACE,GAAG,CAAC,CAACC,GAAG,CAAC;gBACxC;cACF;YACF;YAEA,OAAOF,OAAO;UAChB,CAAC,CAAC;QACJ,CAAC,EAAE,GAAG,CAAC;QAEP,OAAO,MAAMO,aAAa,CAACV,QAAQ,CAAC,CAAC,CAAC;MACxC,CAAC,EAAEF,KAAK,CAAC;IACX,CAAC;;IAED;IACAH,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxBA,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC3BA,aAAa,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA;IAAK4B,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB7B,OAAA;MAAK4B,SAAS,EAAC,MAAM;MAAAC,QAAA,EAClBvB,IAAI,CAACK,GAAG,CAAC,CAACU,GAAG,EAAES,QAAQ,kBACtB9B,OAAA;QAAoB4B,SAAS,EAAC,UAAU;QAAAC,QAAA,EACrCR,GAAG,CAACV,GAAG,CAAC,CAACoB,IAAI,EAAEC,QAAQ,kBACtBhC,OAAA;UAEE4B,SAAS,EAAC,WAAW;UACrBK,KAAK,EAAE;YACLC,eAAe,EAAEH,IAAI,IAAI,OAAO,CAAE;UACpC;QAAE,GAJGC,QAAQ;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKT,CACP;MAAC,GATMR,QAAQ;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUb,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjC,EAAA,CAzEID,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AA2ET,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}